apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: otel-collector
spec:
  serviceAccount: otel-collector
  image: otel/opentelemetry-collector-contrib:latest
  mode: deployment
  config: |
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318
      loki:
        protocols:
          http:
            endpoint: 0.0.0.0:3100
    
      k8s_events:
        auth_type: serviceAccount
    
      prometheus:
        config:
          scrape_configs:
            - job_name: 'otel-collector'
              static_configs:
                - targets: ['localhost:8888']
              scrape_interval: 10s
              scheme: http
              honor_labels: true

    processors:
      k8sattributes:
        auth_type: serviceAccount
        passthrough: false
        extract: 
          metadata: 
            - k8s.pod.name
            - k8s.pod.uid
            - k8s.deployment.name
            - k8s.statefulset.name
            - k8s.daemonset.name
            - k8s.namespace.name
            - k8s.node.name
            - k8s.pod.start_time
        pod_association:
          - sources:
            - from: resource_attributes
              name: k8s.pod.name
            - from: resource_attributes
              name: k8s.namespace.name
    
      metricstransform:
        transforms:
          - include: ^(?!otelcol_)(.*)
            match_type: regexp
            action: update
            new_name: app.$1
      filter:
        metrics:
          include:
            match_type: regexp
            metric_names:
              - app\..*
              - otelcol_.*
          exclude:
            match_type: regexp
            metric_names:
              - app\.internal\..*
    
      resource:
        attributes:
          - action: insert
            key: loki.format
            value: raw
          - action: insert
            key: service.name
            from_attribute: k8s.deployment.name
          - action: insert
            key: service.name
            from_attribute: k8s.daemonset.name
          - action: insert
            key: service.name
            from_attribute: k8s.statefulset.name
    
      memory_limiter:
        check_interval: 5s
        limit_percentage: 80
        spike_limit_percentage: 25
    
      batch: 
        send_batch_size: 10000
        timeout: 10s

    exporters:
      logging:
        loglevel: debug
      otlp/tempo:
        endpoint: tempo.observability.svc.cluster.local:4317
        tls:
          insecure: true
      loki:
        endpoint: "http://loki.observability.svc.cluster.local:3100/loki/api/v1/push"
        default_labels_enabled:
          exporter: true
          job: true
    
      prometheusremotewrite:
        endpoint: "http://prometheus-server:9090/api/v1/write"
        resource_to_telemetry_conversion:
          enabled: true

    service:
      pipelines:
        traces:
          receivers: [otlp]
          processors: [k8sattributes,  batch]
          exporters: [otlp/tempo, logging]
        logs:
          receivers: [otlp, loki ] 
          processors: [k8sattributes, resource,  batch]
          exporters: [loki, logging]
    
        metrics:
          receivers: [otlp, prometheus]
          processors: [ k8sattributes,  batch]
          exporters: [prometheusremotewrite, logging]

  ports:
    - name: metrics
      protocol: TCP
      port: 8888
    - name: otlp-grpc
      port: 4317
      targetPort: 4317
    - name: otlp-http
      port: 4318
      targetPort: 4318